#!/usr/bin/env ruby

THIS_FILE = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__

begin
  require File.dirname(THIS_FILE) + '/../lib/argonaut'
rescue LoadError
  require "#{Dir.pwd}/lib/argonaut"
end

require 'optparse'

# By default show user's reservations if no arguments are supplied
options = { action: 'list_reservations' }
options.merge! Argonaut::Settings.config.fetch(:options, {})

begin
  OptionParser.new do |opts|
    opts.banner = "Usage: argonaut [options]"

    opts.on("--init", "Initialize an argonaut installation by creates a default argonaut.yml file") do |c|
      options[:action] = 'init_configuration'
    end

    opts.on("-T", "--teams", "Show all teams") do |c|
      options[:action] = 'show_teams'
    end

    opts.on("-r env:app", "--reserve env:app", "Reserve a testing environment. Passed in value should confirm to <environment>:<app_name> format") do |env_app|
      options[:env_app] = env_app
      options[:action] = 'reserve'
    end

    opts.on("-R env:app", "--release env:app", "Release a testing environment. Passed in value should confirm to <environment>:<app_name> format") do |env_app|
      options[:env_app] = env_app
      options[:action] = 'release'
    end

    opts.on("-t team_name", "--show-team team_name", "Show the status of team with the passed name") do |team_name|
      options[:team] = team_name
      options[:action] = 'show_status'
    end

    opts.on("-f app_name", "--find-app app_name", "Find all apps with passed name") do |app_name|
      options[:application] = app_name
      options[:action] = 'find_app'
    end

    opts.on("-c", "--clear", "Clears all the reservations made by you") do |clear|
      options[:action] = "clear_reservations"
    end

    opts.on("-l", "--list", "List all your reservations") do |clear|
      options[:action] = "list_reservations"
    end

    opts.on("-G", "--[no-]color", "Colorize table rows for team status when there is reservations") do |colorize|
      options[:colorize_rows] = colorize
    end

    opts.on("-v", "--[no-]verbose", "Run the application logging information about things that happen under the hood") do |v|
      options[:verbose] = v
    end
  end.parse!
rescue OptionParser::InvalidOption
  $stderr.puts 'Invalid option supplied. Enter argonaut -h for help'
  exit(2)
rescue OptionParser::MissingArgument => ma
  if ["-r", "-R"].include? ma.args.first
    $stderr.puts 'Options -r and -R require <environment>:<app_name>'
  end
  exit(2)
end

require 'ostruct'

Argonaut::exec(OpenStruct.new(options))
